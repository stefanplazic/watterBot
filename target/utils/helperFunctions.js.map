{"version":3,"sources":["../../src/utils/helperFunctions.js"],"names":["callBradcast","callSendAPI","handlePostback","updateBotMessage","PAGE_ACCESS_TOKEN","message","response","participants","Participant","find","forEach","participant","psid","sender_psid","request_body","err","console","error","received_postback","payload","newParticipant","save","push","action","text","quickReplies","content","quickRep","replay","repl","messageSaved","Message","findOne","log"],"mappings":";;;;;QAKsBA,Y,GAAAA,Y;QASAC,W,GAAAA,W;QAuBNC,c,GAAAA,c;QAiCMC,gB,GAAAA,gB;;AAtEtB;;;;AAEA;;;;AACA;;;;;;AAFA,IAAMC,oBAAoB,+KAA1B;AAIO,eAAeJ,YAAf,CAA4BK,OAA5B,EAAqC;AACxC,QAAMC,WAAW,EAAE,QAAQD,OAAV,EAAjB;AACA,QAAME,eAAe,MAAMC,uBAAYC,IAAZ,EAA3B;AACAF,iBAAaG,OAAb,CAAqB,UAACC,WAAD,EAAiB;AAClCV,oBAAYU,YAAYC,IAAxB,EAA8BN,QAA9B;AACH,KAFD;AAGH;;AAED;AACO,eAAeL,WAAf,CAA2BY,WAA3B,EAAwCP,QAAxC,EAAkD;AACrD;AACA,QAAIQ,eAAe;AACf,qBAAa;AACT,kBAAMD;AADG,SADE;AAIf,mBAAWP;AAJI,KAAnB;AAMA,QAAI;AACA,cAAM,8BAAQ;AACV,mBAAO,6CADG;AAEV,kBAAM,EAAE,gBAAgBF,iBAAlB,EAFI;AAGV,sBAAU,MAHA;AAIV,oBAAQU;AAJE,SAAR,CAAN;AAOH,KARD,CASA,OAAOC,GAAP,EAAY;AACRC,gBAAQC,KAAR,CAAcF,GAAd;AACH;AACJ;;AAED;AACO,SAASb,cAAT,CAAwBW,WAAxB,EAAqCK,iBAArC,EAAwD;AAC3D,QAAIZ,WAAW,EAAf;;AAEA;AACA,QAAIa,UAAUD,kBAAkBC,OAAhC;;AAEA;AACA,QAAIA,YAAY,mBAAhB,EAAqC;AACjC;AACA,YAAIC,iBAAiB,IAAIZ,sBAAJ,CAAgB,EAAEI,MAAMC,WAAR,EAAhB,CAArB;AACAO,uBAAeC,IAAf;AACAf,iBAASgB,IAAT,CAAc;AACV,oBAAQ;AADE,SAAd;AAGAhB,iBAASgB,IAAT,CAAc;AACV,oBAAQ;;AADE,SAAd;AAIAhB,iBAASgB,IAAT,CAAc;AACV,oBAAQ,iCADE;AAEV,6BAAiB,CACb;AACI,gCAAgB,MADpB;AAEI,yBAAS,cAFb;AAGI,2BAAW;AAHf,aADa;AAFP,SAAd;AAWH;AACJ;;AAED;AACO,eAAenB,gBAAf,CAAgCoB,MAAhC,EAAwCC,IAAxC,EAA8CC,YAA9C,EAA4D;AAC/D;AACA,QAAI;AACA,YAAIC,UAAU,EAAd;;AAEA;AACA,YAAIC,WAAW,EAAf;AACAF,qBAAaf,OAAb,CAAqB,UAACkB,MAAD,EAAY;AAC7B,gBAAMC,OAAO;AACT,gCAAgB,MADP;AAET,yBAASD,MAFA;AAGT,2BAAW;AAHF,aAAb;AAKAD,qBAASL,IAAT,CAAcO,IAAd;AACH,SAPD;AAQAH,kBAAU,EAAE,QAAQF,IAAV,EAAgB,iBAAiBG,QAAjC,EAAV;;AAEA;AACA,YAAIG,eAAe,MAAMC,mBAAQC,OAAR,CAAgB,EAAET,QAAQA,MAAV,EAAhB,CAAzB;AACAO,qBAAaJ,OAAb,GAAuBA,OAAvB;AACAI,uBAAe,MAAMA,aAAaT,IAAb,EAArB;AACAL,gBAAQiB,GAAR,CAAYH,YAAZ;AACH,KApBD,CAqBA,OAAOf,GAAP,EAAY;AACRC,gBAAQC,KAAR,CAAcF,GAAd;AACH;AACJ","file":"helperFunctions.js","sourcesContent":["import request from 'request-promise';\r\nconst PAGE_ACCESS_TOKEN = 'EAAipPa65D7sBADDa5nK4qSIPk9VjS0GPaTIUjIDr6bMf5Ns6OHGR3ZBOYt4eH5kTZCcClCK8C24O9ac2iWNfy44eIvDcvvcAfXhGNlYyEwAgBxlXbveYTj8ewrDn6b2dc227z5n6w4UbeivPAmTXkBVbOyKFETL4Ge7kmiPQZDZD';\r\nimport Participant from '../models/participants';\r\nimport Message from '../models/messages';\r\n\r\nexport async function callBradcast(message) {\r\n    const response = { \"text\": message };\r\n    const participants = await Participant.find();\r\n    participants.forEach((participant) => {\r\n        callSendAPI(participant.psid, response);\r\n    });\r\n}\r\n\r\n// Sends response messages via the Send API\r\nexport async function callSendAPI(sender_psid, response) {\r\n    // Construct the message body\r\n    let request_body = {\r\n        \"recipient\": {\r\n            \"id\": sender_psid\r\n        },\r\n        \"message\": response\r\n    }\r\n    try {\r\n        await request({\r\n            \"uri\": \"https://graph.facebook.com/v2.6/me/messages\",\r\n            \"qs\": { \"access_token\": PAGE_ACCESS_TOKEN },\r\n            \"method\": \"POST\",\r\n            \"json\": request_body\r\n        });\r\n\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n    }\r\n}\r\n\r\n// Handles messaging_postbacks events\r\nexport function handlePostback(sender_psid, received_postback) {\r\n    let response = [];\r\n\r\n    // Get the payload for the postback\r\n    let payload = received_postback.payload;\r\n\r\n    // Set the response based on the postback payload\r\n    if (payload === 'action@getStarted') {\r\n        //save Participants\r\n        var newParticipant = new Participant({ psid: sender_psid });\r\n        newParticipant.save();\r\n        response.push({\r\n            \"text\": \"Hi ! I will be your personal water trainer ðŸ™‚ you can call me Shakira ðŸ’§\",\r\n        });\r\n        response.push({\r\n            \"text\": \"What I can do for you? â˜‘  Daily water reminders \\n â˜‘  Personalized AI recommendations\\n â˜‘  Tips about water drinking\",\r\n\r\n        });\r\n        response.push({\r\n            \"text\": \"Are you ready for this journey?\",\r\n            \"quick_replies\": [\r\n                {\r\n                    \"content_type\": \"text\",\r\n                    \"title\": \"Let's dig in\",\r\n                    \"payload\": \"action@digIn\"\r\n                }\r\n            ]\r\n        });\r\n\r\n    }\r\n}\r\n\r\n// Update message\r\nexport async function updateBotMessage(action, text, quickReplies) {\r\n    // Construct the message body\r\n    try {\r\n        let content = {};\r\n\r\n        //put quick replies\r\n        let quickRep = [];\r\n        quickReplies.forEach((replay) => {\r\n            const repl = {\r\n                \"content_type\": \"text\",\r\n                \"title\": replay,\r\n                \"payload\": \"action@drank\"\r\n            }\r\n            quickRep.push(repl);\r\n        });\r\n        content = { \"text\": text, \"quick_replies\": quickRep };\r\n\r\n        //save to message\r\n        let messageSaved = await Message.findOne({ action: action });\r\n        messageSaved.content = content;\r\n        messageSaved = await messageSaved.save();\r\n        console.log(messageSaved);\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n    }\r\n}\r\n\r\n"]}