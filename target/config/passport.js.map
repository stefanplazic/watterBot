{"version":3,"sources":["../../src/config/passport.js"],"names":["LocalStrategy","passportLocal","Strategy","JWTStrategy","passportJWT","ExtractJWT","ExtractJwt","SECRET_KEY","databaseConfig","secretKey","passport","use","usernameField","passwordField","email","password","done","user","UserModel","findOne","message","validate","isValidPassword","signedJwt","jwt","sign","id","_id","err","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","jwtPayload","findById","then","catch","passReqToCallback","req","process","nextTick","newUser","save"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,gBAAgBC,wBAAcC,QAApC;AACA,IAAMC,cAAcC,sBAAYF,QAAhC;AACA,IAAMG,aAAaD,sBAAYE,UAA/B;AACA,IAAMC,aAAaC,yBAAeC,SAAlC;;AAEA;AACAC,mBAASC,GAAT,CAAa,OAAb,EAAsB,IAAIX,aAAJ,CAAkB;AACpCY,mBAAe,OADqB;AAEpCC,mBAAe;AAFqB,CAAlB,EAIlB,gBAAgBC,KAAhB,EAAuBC,QAAvB,EAAiCC,IAAjC,EAAuC;AACnC;AACA,QAAI;AACA,YAAMC,OAAO,MAAMC,gBAAUC,OAAV,CAAkB,EAAEL,YAAF,EAAlB,CAAnB;AACA,YAAI,CAACG,IAAL,EACI,OAAOD,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAEI,SAAS,8BAAX,EAAlB,CAAP;;AAEJ;AACA,YAAMC,WAAW,MAAMJ,KAAKK,eAAL,CAAqBP,QAArB,CAAvB;AACA,YAAI,CAACM,QAAL,EACI,OAAOL,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAEI,SAAS,8BAAX,EAAlB,CAAP;;AAEJ;AACA,YAAMG,YAAYC,uBAAIC,IAAJ,CAAS,EAAEC,IAAIT,KAAKU,GAAX,EAAgBb,OAAOG,KAAKH,KAA5B,EAAT,EAA8CP,UAA9C,CAAlB;;AAEA,eAAOS,KAAK,IAAL,EAAWO,SAAX,CAAP;AACH,KAdD,CAgBA,OAAOK,GAAP,EAAY;AAAEZ,aAAKY,GAAL;AAAY;AAC7B,CAvBiB,CAAtB;;AA0BAlB,mBAASC,GAAT,CAAa,IAAIR,WAAJ,CAAgB;AACzB0B,oBAAgBxB,WAAWyB,2BAAX,EADS;AAEzBC,iBAAaxB;AAFY,CAAhB,EAIT,UAAUyB,UAAV,EAAsBhB,IAAtB,EAA4B;;AAExB;AACA,WAAOE,gBAAUe,QAAV,CAAmBD,WAAWN,EAA9B,EACFQ,IADE,CACG,gBAAQ;AACV,eAAOlB,KAAK,IAAL,EAAWC,IAAX,CAAP;AACH,KAHE,EAIFkB,KAJE,CAII,eAAO;AACV,eAAOnB,KAAKY,GAAL,CAAP;AACH,KANE,CAAP;AAOH,CAdQ,CAAb;;AAiBA;AACAlB,mBAASC,GAAT,CAAa,QAAb,EAAuB,IAAIX,aAAJ,CAAkB;AACrCY,mBAAe,OADsB;AAErCC,mBAAe,UAFsB;AAGrCuB,uBAAmB;AAHkB,CAAlB,EAKnB,gBAAgBC,GAAhB,EAAqBvB,KAArB,EAA4BC,QAA5B,EAAsCC,IAAtC,EAA4C;;AAExC,QAAI;AACAsB,gBAAQC,QAAR,CAAiB,kBAAkB;AAC/B,gBAAMtB,OAAO,MAAMC,gBAAUC,OAAV,CAAkB,EAAEL,YAAF,EAAlB,CAAnB;AACA,gBAAIG,IAAJ,EACI,OAAOD,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAEI,SAAS,sBAAX,EAAlB,CAAP;;AAEJ;AACA,gBAAIoB,UAAU,IAAItB,eAAJ,EAAd;AACAsB,oBAAQ1B,KAAR,GAAgBA,KAAhB;AACA0B,oBAAQzB,QAAR,GAAmBA,QAAnB;AACA,kBAAMyB,QAAQC,IAAR,EAAN;AACA;AACA,mBAAOzB,KAAK,IAAL,EAAWwB,OAAX,CAAP;AACH,SAZD;AAaH,KAdD,CAgBA,OAAOZ,GAAP,EAAY;AAAEZ,aAAKY,GAAL;AAAY;AAC7B,CAxBkB,CAAvB","file":"passport.js","sourcesContent":["import passport from 'passport';\r\nimport passportLocal from 'passport-local';\r\nimport passportJWT from 'passport-jwt';\r\nimport jwt from 'jsonwebtoken';\r\nimport UserModel from '../models/users.js';\r\nimport databaseConfig from './databaseConfig';\r\n\r\nconst LocalStrategy = passportLocal.Strategy;\r\nconst JWTStrategy = passportJWT.Strategy;\r\nconst ExtractJWT = passportJWT.ExtractJwt;\r\nconst SECRET_KEY = databaseConfig.secretKey;\r\n\r\n//login \r\npassport.use('login', new LocalStrategy({\r\n    usernameField: 'email',\r\n    passwordField: 'password'\r\n},\r\n    async function (email, password, done) {\r\n        //this one is typically a DB call. Assume that the returned user object is pre-formatted and ready for storing in JWT\r\n        try {\r\n            const user = await UserModel.findOne({ email });\r\n            if (!user)\r\n                return done(null, false, { message: 'Incorrect email or password.' })\r\n\r\n            //check if password is correct\r\n            const validate = await user.isValidPassword(password);\r\n            if (!validate)\r\n                return done(null, false, { message: 'Incorrect email or password.' })\r\n\r\n            //everything is ok - return jwt token with user id and email\r\n            const signedJwt = jwt.sign({ id: user._id, email: user.email }, SECRET_KEY);\r\n\r\n            return done(null, signedJwt);\r\n        }\r\n\r\n        catch (err) { done(err); }\r\n    }\r\n));\r\n\r\npassport.use(new JWTStrategy({\r\n    jwtFromRequest: ExtractJWT.fromAuthHeaderAsBearerToken(),\r\n    secretOrKey: SECRET_KEY\r\n},\r\n    function (jwtPayload, done) {\r\n\r\n        //find the user in db if needed. This functionality may be omitted if you store everything you'll need in JWT payload.\r\n        return UserModel.findById(jwtPayload.id)\r\n            .then(user => {\r\n                return done(null, user);\r\n            })\r\n            .catch(err => {\r\n                return done(err);\r\n            });\r\n    }\r\n));\r\n\r\n//singup\r\npassport.use('singup', new LocalStrategy({\r\n    usernameField: 'email',\r\n    passwordField: 'password',\r\n    passReqToCallback: true\r\n},\r\n    async function (req, email, password, done) {\r\n\r\n        try {\r\n            process.nextTick(async function () {\r\n                const user = await UserModel.findOne({ email });\r\n                if (user)\r\n                    return done(null, false, { message: 'Email allready taken' })\r\n\r\n                //create user\r\n                var newUser = new UserModel();\r\n                newUser.email = email;\r\n                newUser.password = password;\r\n                await newUser.save();\r\n                //everything is ok\r\n                return done(null, newUser);\r\n            });\r\n        }\r\n\r\n        catch (err) { done(err); }\r\n    }\r\n));"]}