{"version":3,"sources":["../src/index.js"],"names":["app","port","process","env","PORT","use","bodyParser","urlencoded","extended","json","express","static","path","join","__dirname","get","req","res","post","body","object","entry","forEach","webhook_event","messaging","console","log","status","send","sendStatus","VERIFY_TOKEN","mode","query","token","challenge","err","next","locals","message","error","listen"],"mappings":";;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;AACA,IAAMC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;;AAEAJ,IAAIK,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAL,IAAIK,GAAJ,CAAQC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAR,IAAIK,GAAJ,CAAQC,qBAAWG,IAAX,EAAR;;AAEAT,IAAIK,GAAJ,CAAQ,qCAAR;;AAEAL,IAAIK,GAAJ,CAAQK,kBAAQC,MAAR,CAAeC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;;AAEAd,IAAIe,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvBA,QAAIR,IAAJ,CAAS,EAAE,YAAY,6BAAd,EAAT;AACH,CAFD;;AAIA;AACA;AACAT,IAAIkB,IAAJ,CAAS,UAAT,EAAqB,UAACF,GAAD,EAAMC,GAAN,EAAc;;AAE/B,QAAIE,OAAOH,IAAIG,IAAf;;AAEA;AACA,QAAIA,KAAKC,MAAL,KAAgB,MAApB,EAA4B;;AAExB;AACAD,aAAKE,KAAL,CAAWC,OAAX,CAAmB,UAAUD,KAAV,EAAiB;;AAEhC;AACA;AACA,gBAAIE,gBAAgBF,MAAMG,SAAN,CAAgB,CAAhB,CAApB;AACAC,oBAAQC,GAAR,CAAYH,aAAZ;AACH,SAND;;AAQA;AACAN,YAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB;AACH,KAbD,MAaO;AACH;AACAX,YAAIY,UAAJ,CAAe,GAAf;AACH;AAEJ,CAvBD;;AAyBA7B,IAAIe,GAAJ,CAAQ,UAAR,EAAoB,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAE9B;AACA,QAAIa,eAAe,QAAnB;;AAEA;AACA,QAAIC,OAAOf,IAAIgB,KAAJ,CAAU,UAAV,CAAX;AACA,QAAIC,QAAQjB,IAAIgB,KAAJ,CAAU,kBAAV,CAAZ;AACA,QAAIE,YAAYlB,IAAIgB,KAAJ,CAAU,WAAV,CAAhB;;AAEA;AACA,QAAID,QAAQE,KAAZ,EAAmB;;AAEf;AACA,YAAIF,SAAS,WAAT,IAAwBE,UAAUH,YAAtC,EAAoD;;AAEhD;AACAL,oBAAQC,GAAR,CAAY,kBAAZ;AACAT,gBAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,SAArB;AAEH,SAND,MAMO;AACH;AACAjB,gBAAIY,UAAJ,CAAe,GAAf;AACH;AACJ;AACJ,CAzBD;;AA2BA7B,IAAIK,GAAJ,CAAQ,UAAU8B,GAAV,EAAenB,GAAf,EAAoBC,GAApB,EAAyBmB,IAAzB,EAA+B;AACnC;AACAnB,QAAIoB,MAAJ,CAAWC,OAAX,GAAqBH,IAAIG,OAAzB;AACArB,QAAIoB,MAAJ,CAAWE,KAAX,GAAmBvB,IAAIhB,GAAJ,CAAQe,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCoB,GAAvC,GAA6C,EAAhE;AACA;AACAlB,QAAIU,MAAJ,CAAWQ,IAAIR,MAAJ,IAAc,GAAzB;AACAV,QAAIW,IAAJ,CAASO,GAAT;AACA;AACAV,YAAQc,KAAR,CAAcJ,GAAd;AAEH,CAVD;;AAYA;AACAnC,IAAIwC,MAAJ,CAAWvC,IAAX,EAAiB,YAAM;AAAEwB,YAAQC,GAAR,CAAY,oCAAZ;AAAoD,CAA7E","file":"index.js","sourcesContent":["import express from 'express';\r\nimport bodyParser from 'body-parser';\r\n\r\nimport mongoSanitize from 'express-mongo-sanitize';\r\nimport path from 'path';\r\nimport logger from 'morgan';\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\napp.use(logger('dev'));\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(bodyParser.json());\r\n\r\napp.use(mongoSanitize());\r\n\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.get('/', (req, res) => {\r\n    res.json({ \"tutorial\": \"Build REST API with node.js\" });\r\n});\r\n\r\n/*create a test webhook*/\r\n// Creates the endpoint for our webhook \r\napp.post('/webhook', (req, res) => {\r\n\r\n    let body = req.body;\r\n\r\n    // Checks this is an event from a page subscription\r\n    if (body.object === 'page') {\r\n\r\n        // Iterates over each entry - there may be multiple if batched\r\n        body.entry.forEach(function (entry) {\r\n\r\n            // Gets the message. entry.messaging is an array, but \r\n            // will only ever contain one message, so we get index 0\r\n            let webhook_event = entry.messaging[0];\r\n            console.log(webhook_event);\r\n        });\r\n\r\n        // Returns a '200 OK' response to all requests\r\n        res.status(200).send('EVENT_RECEIVED');\r\n    } else {\r\n        // Returns a '404 Not Found' if event is not from a page subscription\r\n        res.sendStatus(404);\r\n    }\r\n\r\n});\r\n\r\napp.get('/webhook', (req, res) => {\r\n\r\n    // Your verify token. Should be a random string.\r\n    let VERIFY_TOKEN = \"ranstr\"\r\n\r\n    // Parse the query params\r\n    let mode = req.query['hub.mode'];\r\n    let token = req.query['hub.verify_token'];\r\n    let challenge = req.query['challenge'];\r\n\r\n    // Checks if a token and mode is in the query string of the request\r\n    if (mode && token) {\r\n\r\n        // Checks the mode and token sent is correct\r\n        if (mode === 'subscribe' && token === VERIFY_TOKEN) {\r\n\r\n            // Responds with the challenge token from the request\r\n            console.log('WEBHOOK_VERIFIED');\r\n            res.status(200).send(challenge);\r\n\r\n        } else {\r\n            // Responds with '403 Forbidden' if verify tokens do not match\r\n            res.sendStatus(403);\r\n        }\r\n    }\r\n});\r\n\r\napp.use(function (err, req, res, next) {\r\n    // set locals, only providing error in development\r\n    res.locals.message = err.message;\r\n    res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n    // render the error page\r\n    res.status(err.status || 500);\r\n    res.send(err);\r\n    //save errors to loger\r\n    console.error(err);\r\n\r\n});\r\n\r\n//listen to the port\r\napp.listen(port, () => { console.log('Node server listening on port 3000'); });"]}